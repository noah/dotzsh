function mandelbrot {
   local lines columns colour a b p q i pnew
   ((columns=COLUMNS-1, lines=LINES-1, colour=0))
   for ((b=-1.5; b<=1.5; b+=3.0/lines)) do
       for ((a=-2.0; a<=1; a+=3.0/columns)) do
           for ((p=0.0, q=0.0, i=0; p*p+q*q < 4 && i < 32; i++)) do
               ((pnew=p*p-q*q+a, q=2*p*q+b, p=pnew))
           done
           ((colour=(i/4)%8))
            echo -n "\\e[4${colour}m "
        done
        echo
    done
}

function figlets {
  if [[ "$1" != "" ]]; then
    for x in $(locate \*.flf); do 
      figlet -f `basename $x .flf` "$1"
    done | less # yeah, this probably won't work in bash <-
  else
    echo "Usage: ./figlets <string>"
    return 1
  fi
}

expand-or-complete-with-dots() {
  echo -n "\e[31m......\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots


git_diff (){
    git diff --no-ext-diff $@
}

pf(){
  print_queue=~/print_queue
  if [[ $argv[1] == "" ]]; then
    echo "Usage:  $0 <files>"
    return -1
  fi
  cp -v $@ $print_queue
}

# pmv:
#       pattern match mv(1)
#
#       move files matching /pattern/ to <destination>
#       pmv /pattern/ <destination>
#
#       create destination if doesn't exist
pmv()
{
  if [ $# -ne 2 ]; then
    echo "Usage: $0 /pattern/ <destination>"; return -1
  fi
  [ -d "$2" ] || mkdir -vp "$2"
  ls -A | grep -i "$1" | while read line; do mv -v "$line" "$2"; done;
}

# prm:
#      pattern rm(1)
#
#       remove files matching /pattern/
#       prm /pattern/
#
prm()
{
  if [ $# -ne 1 ]; then
    echo "Usage: $0 /pattern/"; return -1
  fi
  targets=$(ls -A | grep -i "$1")
  echo "Removing '$1' recursively:"; echo
  echo $targets
  for second in {3..0}; do
    echo -n " $second"
    sleep 0.5
  done
  echo; echo $targets | while read line; do rm -rfv "$line"; done;
}

grepvim()
{
  if [ $# -ne 1 ]; then
    echo "Usage: $0 /pattern/"; return -1
  fi
  grep -s -l -r "$1" * | while read line; do 
    vim "$line" < /dev/pts/0 > /dev/pts/0
  done;
}


dirsize()
{
  if (( $# == 0 )); then 
    echo "usage: dirsize <dir(s)>"
  fi
  for i; do 
    echo "$(basename $i): $(ls $i | wc -l)"
  done
}


any() {
  emulate -L zsh
  unsetopt KSH_ARRAYS
  if [[ -z "$1" ]] ; then
    echo "any - grep for process(es) by keyword" >&2
    echo "Usage: any " >&2 ; return 1
  else
    ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
  fi
}

run() {
  exec $@ &!
  exit
}

foreground-vi() {
  fg %vi
}
zle -N foreground-vi
bindkey '^Z' foreground-vi

zman() {
  PAGER="less -g -s '+/^       "$1"'" man zshall
}

perm()
{
  stat -c '%a (%A) u: %U (%u) g: %G (%g)' $1
}

git-create-linked()
{
  setopt NO_UNSET
  setopt ERR_RETURN

  # git-create-linked
  #
  #   Given a string $identifier, 
  #       Login to bare repo server
  #       Create a bare repo named $identifier
  #       Logout of bare repo server
  #       Check out a local copy of the remote bare repo named $idenfier
  #       cd to the directory

  remote_user="noah"
  remote_host="0x7be.org"
  remote_bare_basepath="/home/noah/gits/bare"
  local_checkout_basepath="/home/noah/gits/checkouts"

  if [[ ! ($# -eq 1) ]]; then
    echo "Usage: $0 <identifier>"
    return -1
  fi

  remote_bare_repo="$remote_bare_basepath/$1"
  echo "Creating bare $remote_bare_repo on $remote_host"
  ssh "$remote_user@$remote_host" \
      "git init --bare $remote_bare_repo"

  local_repo="$local_checkout_basepath/$1"
  echo "Creating local $local_repo"
  pushd "$local_checkout_basepath"
  git clone \
    "$remote_user@$remote_host:$remote_bare_repo"
  pushd "$local_repo"
  touch README.md
  git add README.md
  git commit -a -m'initial readme commit'
  git push origin master
  echo "Done"
}


tat ()
{
  tmux attach -t "$1" || tmux new -s "$1"
}

letter-wa()
{
  id="$1"
  target="./$(date +%Y-%m-%d)-$id".odt
  echo $target
  cp ~/wolfram/forms-and-letterhead/letterhead/wa.odt "$target"
  office "$target" &
}

letter-wri()
{
  id="$1"
  target="./$(date +%Y-%m-%d)-$id".odt
  echo $target
  cp ~/wolfram/forms-and-letterhead/letterhead/wri.odt "$target"
  office "$target" &
}

awesomereset()
{
  kill -s SIGHUP $(pgrep awesome)
}

awesome_session_bus_address() 
{
  grep -zi DBUS /proc/$(pgrep awesome)/environ | sed -r -e 's/^DBUS_SESSION_BUS_ADDRESS=//'
}

# vim: ft=zsh
