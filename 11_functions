function wmclass() {
    # get WM_CLASS information
    # http://awesome.naquadah.org/wiki/FAQ#How_to_find_window.27s_class_and_other_identifiers.3F
    echo '\u2192 Click a window.'
    xi="$(xprop | grep --color=none WM_CLASS)"
    sp1=("${(s#, #)xi}")
    sp2=("${(s# = #)${sp1[1]}}")

    echo "Class ${sp1[2]}"
    echo "Instance ${sp2[2]}"
}

function mandelbrot {
   local lines columns colour a b p q i pnew
   ((columns=COLUMNS-1, lines=LINES-1, colour=0))
   for ((b=-1.5; b<=1.5; b+=3.0/lines)) do
       for ((a=-2.0; a<=1; a+=3.0/columns)) do
           for ((p=0.0, q=0.0, i=0; p*p+q*q < 4 && i < 32; i++)) do
               ((pnew=p*p-q*q+a, q=2*p*q+b, p=pnew))
           done
           ((colour=(i/4)%8))
            echo -n "\\e[4${colour}m "
        done
        echo
    done
}

function figlets {
  if [[ "$1" != "" ]]; then
    for x in $(locate \*.flf); do 
      figlet -f `basename $x .flf` "$1"
    done | less # yeah, this probably won't work in bash <-
  else
    echo "Usage: ./figlets <string>"
    return 1
  fi
}

expand-or-complete-with-dots() {
  echo -n "\e[31m......\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots


git_diff (){
    git diff --no-ext-diff $@
}

pf(){
  print_queue=~/print_queue
  if [[ $argv[1] == "" ]]; then
    echo "Usage:  $0 <files>"
    return -1
  fi
  cp -v $@ $print_queue
}

# pmv:
#       pattern match mv(1)
#
#       move files matching /pattern/ to <destination>
#       pmv /pattern/ <destination>
#
#       create destination if doesn't exist
pmv()
{
  if [ $# -ne 2 ]; then
    echo "Usage: $0 /pattern/ <destination>"; return -1
  fi
  [ -d "$2" ] || mkdir -vp "$2"
  ls -A | grep -i "$1" | while read line; do mv -v "$line" "$2"; done;
}

# prm:
#      pattern rm(1)
#
#       remove files matching /pattern/
#       prm /pattern/
#
prm()
{
  if [ $# -ne 1 ]; then
    echo "Usage: $0 /pattern/"; return -1
  fi
  targets=$(ls -A | grep -i "$1")
  echo "Removing '$1' recursively:"; echo
  echo $targets
  for second in {3..0}; do
    echo -n " $second"
    sleep 0.5
  done
  echo; echo $targets | while read line; do rm -rfv "$line"; done;
}

grepvim()
{
  if [ $# -ne 1 ]; then
    echo "Usage: $0 /pattern/"; return -1
  fi
  grep -s -l -r "$1" * | while read line; do 
    vim "$line" < /dev/pts/0 > /dev/pts/0
  done;
}


dirsize()
{
  if (( $# == 0 )); then 
    echo "usage: dirsize <dir(s)>"
  fi
  for i; do 
    echo "$(basename $i): $(ls $i | wc -l)"
  done
}


any() {
  emulate -L zsh
  unsetopt KSH_ARRAYS
  if [[ -z "$1" ]] ; then
    echo "any - grep for process(es) by keyword" >&2
    echo "Usage: any " >&2 ; return 1
  else
    ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
  fi
}

run() {
  exec $@ &!
  exit
}

foreground-vi() {
  fg %vi
}
zle -N foreground-vi
bindkey '^Z' foreground-vi

zman() {
  PAGER="less -g -s '+/^       "$1"'" man zshall
}

perm()
{
  stat -c '%a (%A) u: %U (%u) g: %G (%g)' $1
}

git-create-linked()
{
  setopt NO_UNSET
  setopt ERR_RETURN

  # git-create-linked
  #
  #   Given a string $identifier, 
  #       Login to bare repo server
  #       Create a bare repo named $identifier
  #       Logout of bare repo server
  #       Check out a local copy of the remote bare repo named $idenfier
  #       cd to the directory

  remote_user="noah"
  remote_host="tilton.co"
  remote_bare_basepath="/home/noah/gits/bare"
  local_checkout_basepath="/home/noah/gits/checkouts"

  if [[ ! ($# -eq 1) ]]; then
    echo "Usage: $0 <identifier>"
    return -1
  fi

  remote_bare_repo="$remote_bare_basepath/$1"
  echo "Creating bare $remote_bare_repo on $remote_host"
  ssh "$remote_user@$remote_host" \
      "git init --bare $remote_bare_repo"

  local_repo="$local_checkout_basepath/$1"
  echo "Creating local $local_repo"
  pushd "$local_checkout_basepath"
  git clone \
    "$remote_user@$remote_host:$remote_bare_repo"
  pushd "$local_repo"
  touch README.md
  git add README.md
  git commit -a -m'initial readme commit'
  git push origin master
  echo "Done"
}


tat ()
{
  tmux attach -t "$1" || tmux new -s "$1"
}

# queue paths for later deletion
zap()
{
  local zapfile="$HOME/.zapfile"

  if (( $# == 0 )); then
    echo "usage: zap file ..."
  fi

  if [[ ! -f "$zapfile" ]]; then
    touch "$zapfile" && echo "created $zapfile"
  fi

  for i; do
    if [[ "$i" == "-c" ]]; then
      : > "$zapfile"
    elif [[ "$i" == "-d" ]]; then
      while read zap; do 
        rm -Rfv "$zap"
      done < "$zapfile"
      : > "$zapfile"
    elif [[ "$i" == "-q" ]]; then
      while read zap; do 
        echo "$zap"
      done < "$zapfile"
    else
      zapped="$(readlink -f "$i")"
      if [[ -n "$zapped" ]]; then
        if [[ -e "$zapped" ]]; then
          echo "$zapped" >> "$zapfile"
          echo "✗ \`$zapped'"
        fi
      fi
    fi
  done
}


# # queue paths for later keeping
# keep()
# {
#   local keepfile="$HOME/.keepfile"
# 
#   if (( $# == 0 )); then
#     echo "usage: keep file ..."
#   fi
# 
#   if [[ ! -f "$keepfile" ]]; then
#     touch "$keepfile" && echo "created $keepfile"
#   fi
# 
#   for i; do
#     if [[ "$i" == "-c" ]]; then
#       : > "$keepfile"
#     elif [[ "$i" == "-m" ]]; then
#       if [[ -n "${argv[$i+1]}" ]]; then
#         while read keep; do 
#           mv -v "$keep" "$(readlink -f "${argv[$i+1}")"
#         done < "$keepfile"
#         : > "$keepfile"
#       else
#         echo "missing destination file operand"
#         return 1
#       fi
#     elif [[ "$i" == "-q" ]]; then
#       while read keep; do 
#         echo "$keep"
#       done < "$keepfile"
#     else
#       kept="$(readlink -f "$i")"
#       if [[ -n "$kept" ]]; then
#         if [[ -e "$kept" ]]; then
#           echo "$kept" >> "$keepfile"
#           echo "✓ \`$kept'"
#         fi
#       fi
#     fi
#   done
# }

tat ()
{
  # attach to tmux session, creating session if it doesn't exist
  tmux attach -t "$1" || tmux new -s "$1"
}

tns ()
{
  # create tmux session, attaching to session if it exists
  tmux new -s "$1" || tmux attach -t "$1"
}

awesomereset()
{
  kill -s SIGHUP $(pgrep awesome)
}

awesome_session_bus_address() 
{
  grep -zi DBUS /proc/$(pgrep awesome)/environ | sed -r -e 's/^DBUS_SESSION_BUS_ADDRESS=//'
}

vw()
{
  local WIKIDIR=~/gits/checkouts/vimwiki
  pushd $WIKIDIR || return -1
  vim index.wiki
  git add *.wiki
  git commit -a && git push
  popd
}

# colorized (vim) man pages


cb() {
  cat $1 | xclip
}

# stream file $1 on port $2
stream()
{
        nc -l -p "$2" < "$1"
}

fontedit()
{
        vim ~/.config/xresources/fonts
        xrdb -all ~/.Xresources
        exec urxvtc

}

function streamvid()
{
  ffmpeg -i "$1" -f matroska -s 640x480 -b:v 256k -vcodec libx264 -acodec copy - | nc -l -p 18944
}


function nq()
{
        # cond. enqueue
        #
        cmus-remote -P $@

        if [[ $? -ne 0 ]]; then
                riddim -e $@
        else
                echo "$@ enqueued to cmus"
        fi
}

function rid()
{
        if [[ $? -ne 0 ]]; then
                bg $1
                disown $1
        else
                bg $1
                disown $1
        fi
}

# vim: ft=zsh
