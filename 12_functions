#compdef _mm

wmclass() {
    # get WM_CLASS information
    # http://awesome.naquadah.org/wiki/FAQ#How_to_find_window.27s_class_and_other_identifiers.3F
    echo '\u2192 Click a window.'
    local xi="$(xprop | grep --color=none WM_CLASS)"
    local sp1=("${(s#, #)xi}")
    local sp2=("${(s# = #)${sp1[1]}}")

    echo "Class ${sp1[2]}"
    echo "Instance ${sp2[2]}"
}

wmname() {
    # TODO
    echo '\u2192 Click a window.'
    local xi="$(xprop | grep --color=none ^WM_NAME)"
    local sp1=("${(s#, #)xi}")
}

function mandelbrot {
   local lines columns colour a b p q i pnew
   ((columns=COLUMNS-1, lines=LINES-1, colour=0))
   for ((b=-1.5; b<=1.5; b+=3.0/lines)) do
       for ((a=-2.0; a<=1; a+=3.0/columns)) do
           for ((p=0.0, q=0.0, i=0; p*p+q*q < 4 && i < 32; i++)) do
               ((pnew=p*p-q*q+a, q=2*p*q+b, p=pnew))
           done
           ((colour=(i/4)%8))
            echo -n "\\e[4${colour}m "
        done
        echo
    done
}

function figlets {
  if [[ "$1" != "" ]]; then
    for x in $(locate \*.flf); do 
      figlet -f `basename $x .flf` "$1"
    done | less # yeah, this probably won't work in bash <-
  else
    echo "Usage: ./figlets <string>"
    return 1
  fi
}

expand-or-complete-with-dots() {
  echo -n "\e[31m......\e[0m"
  zle expand-or-complete
  zle redisplay
}
zle -N expand-or-complete-with-dots
bindkey "^I" expand-or-complete-with-dots


git_diff (){
    git diff --no-ext-diff $@
}

pf(){
  print_queue=~/print_queue
  if [[ $argv[1] == "" ]]; then
    echo "Usage:  $0 <files>"
    return -1
  fi
  cp -v $@ $print_queue
}

# pmv:
#       pattern match mv(1)
#
#       move files matching /pattern/ to <destination>
#       pmv /pattern/ <destination>
#
#       create destination if doesn't exist
pmv()
{
  if [ $# -ne 2 ]; then
    echo "Usage: $0 /pattern/ <destination>"; return -1
  fi
  [ -d "$2" ] || mkdir -vp "$2"
  ls -A | grep -i "$1" | while read line; do mv -v "$line" "$2"; done;
}

# prm:
#      pattern rm(1)
#
#       remove files matching /pattern/
#       prm /pattern/
#
prm()
{
  if [ $# -ne 1 ]; then
    echo "Usage: $0 /pattern/"; return -1
  fi
  targets=$(ls -A | grep -i "$1")
  echo "Removing '$1' recursively:"; echo
  echo $targets
  for second in {3..0}; do
    echo -n " $second"
    sleep 0.5
  done
  echo; echo $targets | while read line; do rm -rfv "$line"; done;
}

grepvim()
{
  if [ $# -ne 1 ]; then
    echo "Usage: $0 /pattern/"; return -1
  fi
  grep -s -l -r "$1" * | while read line; do 
    vim "$line" < /dev/pts/0 > /dev/pts/0
  done;
}


dirsize()
{
  if (( $# == 0 )); then 
    echo "usage: dirsize <dir(s)>"
  fi
  for i; do 
    echo "$(basename $i): $(ls $i | wc -l)"
  done
}


any() {
  emulate -L zsh
  unsetopt KSH_ARRAYS
  if [[ -z "$1" ]] ; then
    echo "any - grep for process(es) by keyword" >&2
    echo "Usage: any " >&2 ; return 1
  else
    ps xauwww | grep -i --color=auto "[${1[1]}]${1[2,-1]}"
  fi
}

run() {
  exec $@ &!
  exit
}

foreground-vi() {
  fg %vi
}
zle -N foreground-vi
bindkey '^Z' foreground-vi

zman() {
  PAGER="less -g -s '+/^       "$1"'" man zshall
}

perm()
{
  stat -c '%a (%A) u: %U (%u) g: %G (%g)' $1
}

git-create-linked()
{
  setopt NO_UNSET
  setopt ERR_RETURN

  # git-create-linked
  #
  #   Given a string $identifier, 
  #       Login to bare repo server
  #       Create a bare repo named $identifier
  #       Logout of bare repo server
  #       Check out a local copy of the remote bare repo named $idenfier
  #       cd to the directory

  remote_user="noah"
  remote_host="tilton.co"
  remote_bare_basepath="/home/noah/gits/bare"
  local_checkout_basepath="/home/noah/gits/checkouts"

  if [[ ! ($# -eq 1) ]]; then
    echo "Usage: $0 <identifier>"
    return -1
  fi

  remote_bare_repo="$remote_bare_basepath/$1"
  echo "Creating bare $remote_bare_repo on $remote_host"
  ssh "$remote_user@$remote_host" \
      "git init --bare $remote_bare_repo"

  local_repo="$local_checkout_basepath/$1"
  echo "Creating local $local_repo"
  pushd "$local_checkout_basepath"
  git clone \
    "$remote_user@$remote_host:$remote_bare_repo"
  pushd "$local_repo"
  touch README.md
  git add README.md
  git commit -a -m'initial readme commit'
  git push origin master
  echo "Done"
}


t ()
{
  tmux attach -t "$1" || tmux new -s "$1"
}

# queue paths for later deletion
zap()
{
  local zapfile="$HOME/.zapfile"

  if (( $# == 0 )); then
    echo "usage: zap file ..."
  fi

  if [[ ! -f "$zapfile" ]]; then
    touch "$zapfile" && echo "created $zapfile"
  fi

  for i; do
    if [[ "$i" == "-c" ]]; then
      : > "$zapfile"
    elif [[ "$i" == "-d" ]]; then
      while read zap; do 
        rm -Rfv "$zap"
      done < "$zapfile"
      : > "$zapfile"
    elif [[ "$i" == "-q" ]]; then
      while read zap; do 
        echo "$zap"
      done < "$zapfile"
    else
      zapped="$(readlink -f "$i")"
      if [[ -n "$zapped" ]]; then
        if [[ -e "$zapped" ]]; then
          echo "$zapped" >> "$zapfile"
          echo "✗ \`$zapped'"
        fi
      fi
    fi
  done
}


# # queue paths for later keeping
# keep()
# {
#   local keepfile="$HOME/.keepfile"
# 
#   if (( $# == 0 )); then
#     echo "usage: keep file ..."
#   fi
# 
#   if [[ ! -f "$keepfile" ]]; then
#     touch "$keepfile" && echo "created $keepfile"
#   fi
# 
#   for i; do
#     if [[ "$i" == "-c" ]]; then
#       : > "$keepfile"
#     elif [[ "$i" == "-m" ]]; then
#       if [[ -n "${argv[$i+1]}" ]]; then
#         while read keep; do 
#           mv -v "$keep" "$(readlink -f "${argv[$i+1}")"
#         done < "$keepfile"
#         : > "$keepfile"
#       else
#         echo "missing destination file operand"
#         return 1
#       fi
#     elif [[ "$i" == "-q" ]]; then
#       while read keep; do 
#         echo "$keep"
#       done < "$keepfile"
#     else
#       kept="$(readlink -f "$i")"
#       if [[ -n "$kept" ]]; then
#         if [[ -e "$kept" ]]; then
#           echo "$kept" >> "$keepfile"
#           echo "✓ \`$kept'"
#         fi
#       fi
#     fi
#   done
# }

tat ()
{
  # attach to tmux session, creating session if it doesn't exist
  tmux attach -t "$1" || tmux new -s "$1"
}

tns ()
{
  # create tmux session, attaching to session if it exists
  tmux new -s "$1" || tmux attach -t "$1"
}

bawesome()
{
  kill -s SIGHUP $(pgrep awesome)
}

awesome_session_bus_address() 
{
  grep -zi DBUS /proc/$(pgrep awesome)/environ | sed -r -e 's/^DBUS_SESSION_BUS_ADDRESS=//'
}

vw()
{
  local WIKIDIR=~/gits/checkouts/vimwiki
  pushd $WIKIDIR || return -1
  vim index.wiki
  git add *.wiki
  git commit -a && git push
  popd
}

# colorized (vim) man pages


cb() {
  cat "$1" | xclip
}

stream() # stream file $1 on port $2
{
        nc -l -p "$2" < "$1"
        # mux="ps"
        # #cvlc -vvv "$1" --sout\
        # #"#standard{access=http,mux=$mux,dst=:$2}"
        # cvlc -vvv "$1" --sout "#standard{access=http,mux=$mux,dst=:$2}" --sout-keep
        # #"http{mux=ffmpeg{mux=flv},dst=:$2}"
}


fontedit()
{
        vim ~/.config/xresources/fonts
        xrdb -all ~/.Xresources
        exec urxvtc

}

streamvid()
{
  ffmpeg -i "$1" -f matroska -s 640x480 -b:v 256k -vcodec libx264 -acodec copy - | nc -l -p 18944
}

conditional_enqueue()
{
        cmus-remote -P $@

        if [[ $? -ne 0 ]]; then
                riddim -e $@
        else
                echo "$@ enqueued to cmus."
        fi
}

nq()
{ 
        if [ $# -lt 1 ]; then
                # process stdin
                while read l
                do
                        conditional_enqueue $l
                done
        else
                conditional_enqueue $@
        fi
}

_nqft()
{
        # enqueue by filetype
        find "$1" -maxdepth 8 -iname "$2" 2>&1|grep -vi "permission denied" | nq
}

nqf()
{
        _nqft "$1" "*.flac"
}

nqm()
{
        _nqft "$1" "*.mp3"
}

nqr()
{
        # random enqueue
        if [ "$#" -lt 1 ] || [ ! -d "$1" ]; then
                echo 'usage: nqr [dir, ...]'
                return
        fi
        find $1 -maxdepth 2 -type d 2>&1|grep -vi "permission denied" | shuf | tail -1 | nq
}

rid()
{
        if [[ $? -ne 0 ]]; then
                bg $1
                disown $1
        else
                # wtf
                #
                ;
        fi
}

rs()
{
        while true; do
                riddim -q | less --pattern="^\*" 
                sleep 5
        done
}

modedit()
{
        # TODO support multiple arguments ($*)
        # If there is a difference in modification times, then the file
        # was modified.
        local t1=$(stat --dereference --format="%Y" "$1")
        vim "$1"
        local t2=$(stat --dereference --format="%Y" "$1")
        return $((t1-t2)) # 'within double parentheses, parameter dereferncing is optional'
}

tags()
{
        modedit "$HOME/.config/awesome/tags.txt"
        if [ $? -ne 0 ]; then bawesome; fi
}

rc.lua()
{
        modedit "$HOME/.config/awesome/rc.lua"
        if [ $? -ne 0 ]; then bawesome; fi
}

theme.lua()
{
        modedit "$HOME/.config/awesome/themes/theme.lua"
        if [ $? -ne 0 ]; then bawesome; fi
}

_()
{
        rtomv "$@" _done
}

has()
{
        setopt extendedglob
        autoload -U zargs
        local root=$1
        shift
        local joined=${(j:*/**/*:)@}
        search_path=$root/*$joined*/**
        zargs -- (#i)$~search_path(N) -- realpath 2> /dev/null
}

has-music()
{
        while read dir; do
                has $dir $@
        done < ~/.secret/music.txt
}

has-film()
{
        while read dir; do
                has $dir $@
        done < ~/.secret/film.txt
}

pls2cmus()
{
        for pls in "$@"; do
                echo "searching $pls"
                curl --silent "$pls" | grep -o http.\* \
                | while read href; do
                        echo "discovered url: $href"
                        cmus-remote -P "$href"
                done 
        done
}

motion-loop()
{
        while true; do
                motion
                sleep 10
        done
}


mm(){
        if [ "$#" -lt 2 ]; then
                echo 'usage: destination [dir, ...]'
                return
        fi
        local pre="$(head -1 ~/.secret/music.txt)"
        local post="$1"
        shift
        local dest="$pre/$post"
        if [ ! -d "$dest" ]; then
                mkdir -v "$dest"
        fi
        rtomv "$@" "$dest"
}
compdef mm _mm

chess()
{
        echo 'sshing'
        ssh -f -o ExitOnForwardFailure=yes\
                -L 6969:freechess.org:5000 "$(cat ~/.myhost)" sleep 5
        pushd ~/src/raptor
        ./raptor&
}

showcolors()
{
    (for code in {000..255};
            do print -P -- "$code: %F{$code}abcdefghijklmnopqrstuvwxyz0123456789!@#$%%^&*()-=_+[]{}\"':?/<>,.~%f";
            done)|less
}

renumber_mp3()
{

        # renumber mp3 files based on id3 info
        for x in *.mp3; 
                do mv "$x" "$(mp3info -p "%a - %02n. %t.mp3" "$x")";
        done

}

pw() {
        egrep -i --color "$@" "$(cat "$HOME/.secret/pw")"
}

psgrep() {
        ps up $(pgrep -f $@) 2>&-;
}

scptors(){
    pushd 
    host="$(cat ~/.secret/h)"
    mapfile -t D < ~/.secret/d
    for d in "${D[@]}"; do
        gp="$(cat ~/secret/gp)"
        echo scp "$gp" $host:$d && rm -fv "$gp"
    done
    popd
}


setscroll(){
		# set natural scroll.  get id-only param from $ xinput list
		_mid=$(xinput list --id-only "pointer:Logitech USB Receiver") 
		xinput set-prop --type=int $_mid "libinput Natural Scrolling Enabled" 1
		# see http://forums.fedoraforum.org/showthread.php?t=298702
}

stracee() {
        #   -e expr     A qualifying expression which modifies which events to trace or how to trace them.  The format of the expression is:
        # 
        #                              [qualifier=][!]value1[,value2]...
        # 
        #                    where  qualifier  is one of trace, abbrev, verbose, raw, signal, read, or write and value is a qualifier-dependent symbol or number.  The default qualifier is trace.  Using an exclamation
        #                    mark negates the set of values.  For example, -e open means literally -e trace=open which in turn means trace only the open system call.  By contrast, -e trace=!open means to trace  every
        #                    system call except open.  In addition, the special values all and none have the obvious meanings.
        # 
        #                    Note that some shells use the exclamation point for history expansion even inside quoted arguments.  If so, you must escape the exclamation point with a backslash.
        #
        strace -e file "$@"
}

fixscroll(){
        xinput set-prop "Cypress APA Trackpad (cyapa)"  --type=int "libinput Natural Scrolling Enabled" 0
}

psg() {
        ps faux | grep --color "$@"
}

pager(){

        "$@" | less
}


x(){
    if [ -f $1 ] ; then
            case $1 in
                    *.tar.bz2)   tar xvjf $1    ;;
                    *.tar.gz)    tar xvzf $1    ;;
                    *.bz2)       bunzip2 $1     ;;
                    *.rar)       unrar x $1     ;;
                    *.gz)        gunzip $1      ;;
                    *.xz)        tar xvf $1     ;;
                    *.tar)       tar xvf $1     ;;
                    *.tbz2)      tar xvjf $1    ;;
                    *.tgz)       tar xvzf $1    ;;
                    *.zip)       unzip $1       ;;
                    *.Z)         uncompress $1  ;;
                    *.7z)        7z x $1        ;;
                    *)           echo "Unable to extract '$1'" ;;
            esac
    else
            echo "'$1' is not a valid file"
    fi
}

vimcompare(){
        vimdiff $1/$2 $2
}

htpasswd() {
        echo -n "$1:"
        openssl passwd -apr1 $2
}



# vim: ft=zsh
# cukk
